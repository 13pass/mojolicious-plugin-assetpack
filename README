NAME
    Mojolicious::Plugin::AssetPack - Compress and convert css, less, sass
    and javascript files

VERSION
    0.01

SYNOPSIS
    In your application:

      use Mojolicious::Lite;

      plugin AssetPack => { rebuild => 1 };

      # define other preprocessors than the default detected
      app->asset->preprocessor(js => sub {
        my($self, $file) = @_;
        return JavaScript::Minifier::XS::minify($file) if $self->minify;
        return; # return undef will keep the original file
      });
      app->asset->preprocessor(less => sub {
        my($self, $file) = @_;
        open my $APP, '-|', lessc => -x => $file or die "lessc -x $file: $!";
        local $/;
        return readline $APP;
      });

      # define assets: $moniker => @real_assets
      app->asset('app.js' => '/js/foo.js', '/js/bar.js');
      app->asset('app.css' => '/css/foo.less', '/css/bar.scss', '/css/main.css');

      app->start;

    In your template:

      %= asset 'app.js'
      %= asset 'app.css'

    See also "register".

DESCRIPTION
  Production mode
    This plugin will compress scss, less, css and javascript with the help
    of external applications on startup. The result will be one file with
    all the sources combined. This file is stored in "Packed directory".

    The actual file requested will also contain the timestamp when this
    server was started. This is to help refreshing cache on change.

    This is done using "pack_javascripts" and "pack_stylesheets".

  Development mode
    This plugin will expand the input files to multiple script or link tags
    which makes debugging and development easier.

    This is done using "expand_moniker".

    TIP! Make morbo watch your less/sass files as well:

      $ morbo -w lib -w templates -w public/sass

  Packed directory
    The output directory where all the compressed files are stored will be
    "public/packed", relative to the application home:

      $app->home->rel_dir('public/packed');

  Applications
    *   less

        LESS extends CSS with dynamic behavior such as variables, mixins,
        operations and functions. See <http://lesscss.org> for more details.

        Installation on Ubuntu and Debian:

          $ sudo apt-get install npm
          $ sudo npm install -g less

    *   sass

        Sass makes CSS fun again. Sass is an extension of CSS3, adding
        nested rules, variables, mixins, selector inheritance, and more. See
        <http://sass-lang.com> for more information.

        Installation on Ubuntu and Debian:

          $ sudo apt-get install rubygems
          $ sudo gem install sass

    *   yuicompressor

        <http://yui.github.io/yuicompressor> is used to compress javascript
        and css.

        Installation on Ubuntu and Debian:

          $ sudo apt-get install npm
          $ sudo npm -g i yuicompressor

ATTRIBUTES
  minify
    This is set to true if the assets should be minified.

METHODS
  pack_javascripts
      $self->pack_javascripts($moniker => \@files);

    This method will combine the input files to one file "Packed directory",
    named "$moniker".

    Will also run "yuicompressor" on the input files to minify them - except
    if the name contains "min". Example "jquery.min.js" will not be minified
    by "yuicompressor".

  pack_stylesheets
      $self->pack_stylesheets($moniker => \@files);

    This method will combine the input files to one file "Packed directory",
    named "$moniker".

    Will also run "less" or "sass" on the input files to minify them.

  expand_moniker
      $bytestream = $self->expand_moniker($c, $moniker);

    This method will return one tag for each asset defined by the
    "$moniker".

    Will also run "less" or "sass" on the files to convert them to css,
    which the browser understand.

    The returning bytestream will contain style or script tags.

  preprocessor
      $self->preprocessor($extension => $cb);

    Define a preprocessor which is run on a given file extension.

    The default preprocessor defined is described under "Applications".

  register
      plugin 'AssetPack', {
        minify => $bool,
        rebuild => $bool,
      };

    Will register the "compress" helper. All arguments are optional.

    "minify" will default to true if "mode" in Mojolicious is "production".

    "rebuild" can be set to true to always rebuild the compressed files when
    the application is started. The default is to use the cached files.

AUTHOR
    Jan Henning Thorsen - "jhthorsen@cpan.org"

